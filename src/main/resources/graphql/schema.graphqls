type Customer {
    cEmail: ID
    cFirstName: String
    cMiddleName: String
    cLastName: String
    cPhoneNumber: String
    cCellPhoneNumber: String
    cAddress: Address
}

type Address {
    doorNo: ID
    street1: String
    street2: String
    area: String
    zipCode: Int
    state: String
    country: String
    addressType: String
    phoneNumber: String
    email: String
    cEmail: ID
}

type Book {
    id: ID!
    title: String!
    author: String!
    publishedYear: Int!
}

input BookInput {
    title: String
    author: String
    publishedYear: Int
}

input CustomerDTO {
    cEmail: ID
    cFirstName: String!
    cMiddleName: String
    cLastName: String!
    cPhoneNumber: Int
    cCellPhoneNumber: Int
}

type Query {
    listAllCustomers: [Customer]
    getCustomerByEmailId(cEmail: ID!): Customer
    getBooks(book: BookInput): [Book]!
    getBookByID(id: ID!): Book
}

type Mutation {
    addCustomer(customerDTO: CustomerDTO): Customer
    updateCustomerByEmail(cEmail: ID!, cFirstName: String, cMiddleName: String,
        cLastName: String, cPhoneNumber: Int, cCellPhoneNumber: Int): Customer
    deleteCustomerByEmail(cEmail: ID!): String

    addAddressByEmail(cEmail: ID!, doorNo: Int, street1: String, street2: String!,
        area: String, zipCode: Int, state: String, country: String, addressType: String
        phoneNumber: String, email: String): Address
    updateAddressByEmail(cEmail: ID!, doorNo: Int, street1: String, street2: String!,
        area: String, zipCode: Int, state: String, country: String, addressType: String
        phoneNumber: String, email: String): Address
    deleteAddressByEmail(cEmail: ID!): String
}
